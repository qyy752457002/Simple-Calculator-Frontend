在许多情况下，refetch 和 queryClient.invalidateQueries(['math_question']) 可以达到相似的效果，
因为它们都能触发数据的重新获取。

然而，它们之间还是有一些重要的区别和适用场景：

refetch
    作用: 立即重新获取数据，不管数据的陈旧状态如何。
    适用场景: 当你明确知道需要立即重新获取数据时使用。例如用户触发某个动作后，你需要立即重新获取数据并更新UI。
    调用位置: 只能在具体的查询上下文中调用，通常是 useQuery 钩子返回的 refetch 方法。

queryClient.invalidateQueries
    作用: 将指定的查询标记为陈旧。这意味着在下次重新渲染或聚焦等触发条件时，会自动重新获取数据。
    适用场景: 当你需要在某个条件发生后，触发某个查询的重新获取，但不需要立即获取数据。
             适合用来全局管理查询的状态和重新获取逻辑。
    调用位置: 可以在任何地方调用，因为它是通过 QueryClient 实例调用的。

结合场景

    即时重新获取数据: 如果你希望在用户提交答案后立即重新获取数据，refetch 是直接的方法。

    标记数据陈旧并重新获取: 如果你希望在某些条件下（例如用户提交答案）标记数据为陈旧，
    并在下次需要时重新获取，可以使用 queryClient.invalidateQueries。